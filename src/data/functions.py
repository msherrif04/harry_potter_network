
import pandas as pd
import numpy as np
import os
import spacy
from spacy import displacy

def filter_entity(entity_list, characters_df):
    """_summary_
    this function takes a list of spacy generated entities and the character dataframe and returns only entities that are characters in the dataframe

    Args:
        entity_list (list): list of entities generated by spacy nlp
        characters_df (dataframe): dataframe of characters from scraped from the harry potter website
    Returns:
        a list of entities that are in the characters dataframe
    """
    return [entity for entity in entity_list
            if entity in list(characters_df.character)
            or entity in list(characters_df.firstname)]
    
def named_entities_per_sentence(spacy_doc):
    """_summary_
    gets a list of sentence entities in each sentence of text using spacy and stores it in a dataframe

    Args:
        spacy_doc (spacy_object): a spacy processed document
        
    Returns:
    A dataframe containing the sentences and corresponding list of recognised named entities in the sentence
    """
    sentence_entity_list=[]

    #loop through sentences and store the named entity list for each sentence
    for sentence in spacy_doc.sents:
        entity_list = [entity.text for entity in sentence.ents]
        sentence_entity_list.append({'sentence':sentence, 'entities': entity_list})
        
        sent_entity_df=pd.DataFrame(sentence_entity_list)
    return (sent_entity_df)

def create_relationships(df, window_size):
    """_summary_
        create a dataframe of relationships based on the df provided and the window size
    Args:
        df (pandas dataframe): dataframe containing column called character entities with alist of characters for each sentsence of a document
        window_size (integer): number of sentences to consider in creating relationships between two adjacent characters in the text
    Returns: 
        a relationship dataframe containing course, target and value columns
    """
    character_relationships =[]
    
    for i in range(df.index[-1]):
            end_i = min(i+5, df.index[-1])
            char_list = sum((df.loc[i:end_i].character_entities),[])
            
            #remove duplicated characters that are next to each other
            char_unique = [char_list[i] for i in range(len(char_list))
                            if (i==0) or char_list[i] != char_list[1-i]]
            
            #create a source and target character for each interaction in the window
            if len(char_unique) > 1:
                for index, source in enumerate(char_unique[:-1]):
                    target = char_unique[index+1]
                    character_relationships.append({'source': source, 'target': target})
    character_relationships_df = pd.DataFrame(character_relationships)
    
    #sort rows column wise to fix reverse interactions eg a->b = b->a
    character_relationships_df = pd.DataFrame(np.sort(character_relationships_df.values, axis=1), columns = character_relationships_df.columns)
    
    #aggregate interactions for each character pair and create a weight column
    character_relationships_df['value']=1
    character_relationships_df = character_relationships_df.groupby(['source', 'target'], sort=False, as_index=False).sum()
    return (character_relationships_df)